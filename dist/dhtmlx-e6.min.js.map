{"version":3,"sources":["src/globals.js","src/dhtmlxObject.js","src/layout/LayoutCell.js","src/layout/BaseLayout.js","src/layout/SimpleLayout.js","src/layout/TwoColumnsLayout.js"],"names":["isNode","o","Node","_typeof","nodeType","nodeName","DEBUG","OBJECT_TYPE","dhtmlxObject","type","container","impl","_type","_container","_impl","_childs","child","push","this","LayoutCell","_dhtmlxObject","log","LAYOUT_CELL","hideHeader","setText","BaseLayout","pattern","dhtmlXLayoutObject","attachLayout","LAYOUT","_cells","initCells","cells","forEachItem","cellImpl","cell","SimpleLayout","_BaseLayout","TwoColumnsLayout"],"mappings":"YAiBA,SAAgBA,QAAQC,SAEN,YAAhB,mBAAOC,MAAP,YAAAC,QAAOD,OAAoBD,YAAaC,MAC3B,YAAb,mBAAOD,GAAP,YAAAE,QAAOF,KAAwC,gBAAfA,GAAEG,UAA6C,gBAAbH,GAAEI,ykCAjBzDC,OAAQ,EAGRC,oBACH,qBACK,qBACJ,eACH,YACA,YACA,cACE,UCTGC,aAAb,sBASiBC,EAAMC,EAAWC,+BAC3BC,MAAQH,OACFI,WAAaH,OACbI,MAAQH,OACdI,gEAOOC,QACDD,QAAQE,KAAKD,sCAOjBE,MAAKN,8CAOLM,MAAKL,8CAOLK,MAAKJ,2CAOLI,MAAKH,iBCjDDI,WAAb,SAAAC,cAEcV,EAAWC,0BACnBL,eACKe,IAAI,kHAGPd,YAAYe,YAAaZ,EAAWC,aAGrCY,eAEAC,QAAQ,8BAZiBhB,cCKnBiB,WAAb,SAAAL,cAQcV,EAAWgB,6BACnBf,GAAO,IACc,iBAAdD,IAA0BV,OAAOU,KAEpC,GAAIiB,4BAEFjB,UAECgB,IAGAhB,EAAUD,OAASF,YAAYe,gBAClCZ,EAAUC,KAAKiB,aAAaF,2FAE9BnB,YAAYsB,OAAQnB,EAAWC,aAChCmB,YACAC,uFAMDC,GAAQd,KAAKY,YACZnB,KAAKsB,YAAY,SAAUC,MAC3BC,GAAO,GAAIhB,YAAWD,KAAMgB,KAC1BjB,KAAKkB,yCAQLjB,MAAKY,cAzCkBtB,cCLnB4B,aAAb,SAAAC,cAOc3B,kHACNA,EAAW,4EAKVQ,MAAKc,MAAM,UAbcP,YCErBa,iBAAb,SAAAD,cAOc3B,kHACNA,EAAW,4EAKVQ,MAAKY,OAAO,uCAKZZ,MAAKY,OAAO,UAlBiBL","file":"dhtmlx-e6.min.js","sourcesContent":["\r\n\r\n/** Enables console.log comments */\r\nexport const DEBUG = true;\r\n\r\n/** All the dhtmlx object types */\r\nexport const OBJECT_TYPE = {\r\n\tLAYOUT : 'layout',\r\n\tLAYOUT_CELL : 'layoutCell',\r\n\tTOOLBAR : 'toolbar', \r\n\tMENU : 'menu', \r\n\tGRID : 'grid', \r\n\tTREE : 'tree', \r\n\tWINDOW : 'window'\r\n};\r\n\r\n// Returns true if it is a DOM node    \r\nexport function isNode (o) {\r\n\treturn (\r\n\t\ttypeof Node === \"object\" ? o instanceof Node : \r\n\t\ttypeof o === \"object\" && typeof o.nodeType === \"number\" && typeof o.nodeName===\"string\"\r\n\t);\r\n}","\r\n/**\r\n  * Parent object of all the wrappers, it holds some common variables.\r\n  */\t \r\nexport class dhtmlxObject {\r\n\t\r\n\t/**\r\n\t * Called by child objects.\r\n\t * @constructor\r\n\t * @param {string} type - Type of component: layout, window, grid, etc.\r\n\t * @param {mixed} container - Object or dom id of the parent element.\r\n\t * @param {object} impl - dhtmlx object, must be created by child class.\r\n\t */\r\n    constructor (type, container, impl) {\r\n\t\tthis._type = type;\r\n        this._container = container;\r\n        this._impl = impl;\r\n\t\tthis._childs = [];\r\n    }\r\n\t\r\n\t/**\r\n\t * Adds a reference to a child object (e. g. adds a menu to a layout)\r\n\t * @param {dhtmlxObject} child - The child object that will be attached to this object\r\n\t */\r\n    addChild (child) {\r\n        this._childs.push(child);\r\n    }\r\n\t\r\n   /**\r\n     * Type of component: layout, window, grid, etc. \r\n     */\r\n\tget type () {\r\n\t\treturn this._type;\r\n\t}\r\n\t\r\n\t/**\r\n     * Usually is other dhtmlxObject, the root layout should be inside document.body\r\n     */\r\n\tget container () { \r\n\t\treturn this._container;\r\n\t}\r\n\t\r\n\t/**\r\n     * dhtmlx object, must be created by child class before calling super in the constructor.\r\n     */\r\n\tget impl () {\r\n\t\treturn this._impl;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Child objects, they must be added manually with the addChild function\r\n\t */\r\n\tget childs () {\r\n\t\treturn this._childs;\r\n\t}\r\n}","\r\nimport { DEBUG, OBJECT_TYPE } from 'globals';\r\nimport { dhtmlxObject } from 'dhtmlxObject';\r\n\r\nexport class LayoutCell extends dhtmlxObject {\r\n\t\r\n\tconstructor (container, impl) {\r\n\t\tif (DEBUG) {\r\n\t\t\tconsole.log('LayoutCell constructor.');\r\n\t\t}\r\n\t\t\r\n\t\tsuper(OBJECT_TYPE.LAYOUT_CELL, container, impl);\r\n\t\t\r\n\t\t// Header is hidden by default\r\n\t\timpl.hideHeader();\r\n\t\t\r\n\t\timpl.setText('');\r\n\t\t\r\n\t\t// next line throws: Uncaught TypeError: Cannot read property 'style' of undefined\r\n\t\t// at window.dhtmlXLayoutCell.dhtmlXLayoutCell.hideArrow\r\n\t\t// impl.hideArrow();\r\n\t}\r\n}","\r\nimport { isNode , OBJECT_TYPE } from 'globals';\r\nimport { dhtmlxObject } from 'dhtmlxObject';\r\nimport { LayoutCell } from 'LayoutCell';\r\n\r\n/**\r\n  * Base class for all layout objects, see:\r\n  * https://docs.dhtmlx.com/layout__index.html\r\n  */\r\nexport class BaseLayout extends dhtmlxObject {\r\n\t\r\n\t/**\r\n\t * Creates the BaseLayout object\r\n\t * @constructor\r\n\t * @param {mixed} container - Object or dom id of the parent element.\r\n\t * @param {string} pattern - dhtmlx object, must be created by child class.\r\n\t */\r\n\tconstructor (container, pattern) {\r\n\t\tvar impl = null;\r\n\t\tif (typeof container === 'string' || isNode(container)) {\r\n\t\t\t\r\n\t\t\timpl = new dhtmlXLayoutObject({\r\n\t\t\t\t// id or object for parent container\r\n\t\t\t\tparent: container,    \t\r\n\t\t\t\t// layout's pattern\t\t\t\r\n\t\t\t\tpattern: pattern          \t\r\n\t\t\t});\r\n\t\t\r\n\t\t} else if (container.type === OBJECT_TYPE.LAYOUT_CELL) {\t\t\t\r\n\t\t\timpl = container.impl.attachLayout(pattern);\r\n\t\t}\r\n\t\tsuper(OBJECT_TYPE.LAYOUT, container, impl);\r\n\t\tthis._cells = [];\t\r\n\t\tthis.initCells();\r\n\t}\r\n\t\r\n\t/**  Internal method called by the constructor */\r\n\tinitCells() {\r\n\t\t// Needed inside the forEachItem\r\n\t\tvar cells = this._cells;\t\r\n\t\tthis.impl.forEachItem(function (cellImpl) {\r\n\t\t\tvar cell = new LayoutCell(this, cellImpl);\r\n\t\t\tcells.push(cell);\r\n\t\t});\r\n\t}\t\r\n\t\r\n\t/**\r\n\t * Array of layout cells (regions inside the layout)\r\n\t */\r\n\tget cells () {\r\n\t\treturn this._cells;\r\n\t}\r\n}","\r\nimport { BaseLayout } from 'layout/BaseLayout';\r\n\r\n/** Layout with only one cell */\r\nexport class SimpleLayout extends BaseLayout {\r\n\t\r\n\t/**\r\n\t * Creates the SimpleLayout object\r\n\t * @constructor\r\n\t * @param {mixed} container - Object or dom id of the parent element.\r\n\t */\r\n\tconstructor (container) {\r\n\t\tsuper(container, '1C');\r\n\t}\r\n\t\r\n\t/** The only LayoutCell object in the layout */\r\n\tget cell () {\r\n\t\treturn this.cells[0];\r\n\t}\r\n}","\r\nimport { BaseLayout } from 'BaseLayout';\r\n\r\n/**\r\n  * Layout with two columns: left and right\r\n  */\r\nexport class TwoColumnsLayout extends BaseLayout {\r\n\t\r\n\t/**\r\n\t * Creates the TwoColumnsLayout object\r\n\t * @constructor\r\n\t * @param {mixed} container - Object or dom id of the parent element.\r\n\t */\r\n\tconstructor (container) {\r\n\t\tsuper(container, '2U');\r\n\t}\r\n\t\r\n\t/** Left LayoutCell */\r\n\tget left () {\r\n\t\treturn this._cells[0];\r\n\t}\r\n\t\r\n\t/** Right LayoutCell */\r\n\tget right () {\r\n\t\treturn this._cells[1];\r\n\t}\r\n}"]}